<template>
  <view class="tab">
    <view @tap="tabChange(0)" class="tab-item">
      <view :class="{tab-title-active: index === 0}" class="tab-title">进行中</view>
      <view :class="{tab-line-active: index === 0}" class="tab-line"></view>
    </view>
    <view @tap="tabChange(1)" class="tab-item">
      <view :class="{tab-title-active: index === 1}" class="tab-title">已完成</view>
      <view :class="{tab-line-active: index === 1}" class="tab-line"></view>
    </view>
    <view @tap="tabChange(2)" class="tab-item">
      <view :class="{tab-title-active: index === 2}" class="tab-title">设置</view>
      <view :class="{tab-line-active: index === 2}" class="tab-line"></view>
    </view>
  </view>
  <view wx:if="{{index===0}}" class="card margin-top-24">
    <view wx:for="{{taskList}}" wx:key="{{index}}" wx:for-item="task" @tap="handleItemTap({{task}})" class="task-item" hover="{{true}}" hover-class="view-light-hover">
      <checkbox-group data-id="{{task.id}}" @change="check">
        <checkbox @tap.stop="emptyFunction" data-id="{{task.id}}" value="{{task.id}}" checked="{{task.done === 1}}" />
      </checkbox-group>
      <view class="task-item-main">
        <wxc-elip class="task-item-title" line="2">{{task.title}}</wxc-elip>
        <view class="task-item-meta">
          <label wx:if="{{task.user.name}}" class="task-item-label">{{task.user.name}}</label>
          <label :class="{error:task.expired}" class="task-item-label">
            <text class="ht-icon ht-clock-outline"></text>
            {{task.deadlineLabel}}
          </label>
          <text wx:for="{{task.tags}}" wx:key="index" wx:for-item="tag" class="tag margin-right-24" style="background: {{tag.color}}">{{tag.name}}</text>
        </view>
      </view>
    </view>
  </view>
  <view wx:if="{{index===1}}" class="card margin-top-24">
    <view wx:for="{{doneList}}" wx:key="{{index}}" wx:for-item="task" @tap="handleItemTap({{task}})" class="task-item">
      <checkbox disabled="true" checked="true" />
      <view class="task-item-main">
        <wxc-elip class="task-item-title" line="2">{{task.title}}</wxc-elip>
        <view class="task-item-meta">
          <label class="task-item-label">{{task.user.name}}</label>
          <label class="task-item-label">
            <text class="ht-icon ht-clock-outline"></text>
            {{wxsDate.formatDate(task.done_at)}} 完成
          </label>
        </view>
      </view>
    </view>
    <wxc-loadmore wx:if="{{showLoadmore}}" is-end="{{!loadMoreDoneList}}" text="{{loadmoreText}}" icon="true"></wxc-loadmore>
  </view>
  <view wx:if="{{index===2}}" class="margin-top-24" hidden="{{projectHidden}}">
    <form @submit="submit">
      <view class="project-name">
        <input value="{{project.name}}" name="name" maxlength="20" focus="{{projectNameFocus}}" type="text" placeholder="项目名称" />
      </view>
      <view class="project-desc">
        <textarea value="{{project.desc}}" name="desc" maxlength="200" show-confirm-bar="{{false}}" placeholder="简单描述项目" class="project-desc-textarea" />
      </view>
      <view class="project-btn">
        <button form-type="submit" hover-class="btn-primary-hover" class="btn-primary">保存设置</button>
        <button @tap="showMembers" class="primary margin-top-24">修改项目成员</button>
      </view>
    </form>
  </view>
  <view :class="{page-cover-show: visable}" class="page-cover">
    <view class="toolbar">
      <text @tap="handleMembersCancel" class="text-button">取消</text>
      <text>选择成员</text>
      <text @tap="handleMembersOk" class="text-button">确定</text>
    </view>
    <view>
      <checkbox-group>
        <view @tap="handleMemberItemTap({{index}}, {{item.checked}})" wx:for="{{members}}" wx:key="{{index}}" wx:for-item="item" class="member">
          <checkbox @tap.stop="handleMemberCheck({{index}}, {{item.checked}})" checked="{{item.checked}}" />
          <view class="member-avatar" style="background:{{wxsUtils.avatarColor(item.color)}}">
            <text>{{wxsUtils.avatarName(item.name)}}</text>
          </view>
          <text class="member-name">{{item.name}}</text>
        </view>
      </checkbox-group>
    </view>
  </view>
  <block wx:if="{{noData}}">
    <wxc-abnor type="DATA" title="{{noDataTitle}}"></wxc-abnor>
  </block>
  <view wx:if="{{index===0}}" @tap="showTaskAdd" class="view-btn-bottom" hover-class="view-light-hover">
    <text class="ht-icon ht-plus margin-right-16"></text>
    <text>添加任务</text>
  </view>
</template>

<script>
import wepy from 'wepy'
import BasePage from 'BasePage'
import date from 'utils/date'
import wxsDate from '../wxs/date.wxs'
import wxsUtils from '../wxs/utils.wxs'
import taskEvent from '@/common/constant/taskEvent'
import { api } from '@/config'
export default class Tasks extends BasePage {
  config = {
    navigationBarTitleText: '',
    enablePullDownRefresh: true,
    usingComponents: {
      'wxc-elip': '../../packages/@minui/wxc-elip/dist/index',
      'wxc-abnor': '../../packages/@minui/wxc-abnor/dist/index',
      'wxc-loadmore': '../../packages/@minui/wxc-loadmore/dist/index'
    }
  }

  wxs = {
    wxsDate,
    wxsUtils
  }

  data = {
    index: 0,
    project: {
      id: 0,
      name: '',
      users: []
    },
    list: [],
    doneList: [],
    page: {
      page: 0,
      total: 0,
      size: 10
    },
    visable: false,
    projectHidden: false,
    projectNameFocus: false,
    members: []
  }

  computed = {
    taskList() {
      let list = []
      for (const task of this.list) {
        task.deadlineLabel = date.format(task.deadline)
        if (date.ltToday(task.deadline)) {
          task.expired = true
        }
        list.push(task)
      }
      return list
    },
    noData() {
      if (this.index === 0) {
        return this.list.length === 0
      }
      if (this.index === 1) {
        return this.doneList.length === 0
      }
      return false
    },
    noDataTitle() {
      if (this.index === 0) {
        return '没有正在进行的任务'
      }
      if (this.index === 1) {
        return '没有已经完成的任务'
      }
    },
    loadMoreDoneList() {
      return this.page.total > this.page.page * this.page.size
    },
    loadmoreText() {
      return this.loadMoreDoneList ? '玩命加载中' : '没有了'
    },
    showLoadmore() {
      return this.doneList.length !== 0
    }
  }

  methods = {
    showTaskAdd() {
      wepy.navigateTo({
        url: `taskAdd`
      })
    },
    handleItemTap(task) {
      wepy.navigateTo({
        url: `task?id=${task.id}`
      })
    },
    tabChange(index = 0) {
      this.index = Number(index)
      if (this.index === 2 && this.allUsers.length === 0) {
        this.getAllUsersAndGroups()
      }
      if (this.index === 2) {
        this.projectNameFocus = true
      } else {
        this.projectNameFocus = false
      }
    },
    check(e) {
      let id = e.target.dataset.id
      let task = {}
      let event = {}
      event.user_id = this.user.id
      event.task_id = id
      if (e.detail.value.length === 0) {
        task.done = 0
        event.type = taskEvent.reopen
        event.event = taskEvent.reopenText
      } else {
        task.done = 1
        event.type = taskEvent.done
        event.event = taskEvent.doneText
      }
      this.updateTask(id, task, event)
    },
    submit(e) {
      const { name, desc } = e.detail.value
      if (name.trim() === '') {
        this.showToast('请输入项目名称')
        return
      }
      this.updateProject(name, desc)
    },
    showMembers() {
      this.setMembers()
      this.visable = true
      // textarea层级总是最高，弹出层时隐藏掉
      setTimeout(() => {
        this.projectHidden = true
        this.$apply()
      }, 300)
    },
    handleMembersOk() {
      this.updateProjectMembers()
    },
    handleMembersCancel() {
      this.visable = false
      // textarea显示
      setTimeout(() => {
        this.projectHidden = false
        this.$apply()
      }, 300)
    },
    handleMemberItemTap(index, checked) {
      this.members[index].checked = !checked
    },
    handleMemberCheck(index, checked) {
      this.members[index].checked = !checked
    },
    emptyFunction() { }
  }

  onLoad(option) {
    this.user = this.store().user
    this.currentTeam = this.store().currentTeam
    this.allUsers = this.store().allUsers
    this.project.id = option.id
    this.project.name = option.name
    wepy.setNavigationBarTitle({ title: `${option.name}` })
    this.getProject()
  }

  onShow() {
    this.getList()
    this.getDoneList()
  }

  onPullDownRefresh() {
    if (this.index === 0) {
      this.getList().then(() => {
        wepy.stopPullDownRefresh()
      })
    } else if (this.index === 1) {
      this.doneList = []
      this.page = {
        page: 0,
        total: 0,
        size: 10
      }
      this.getDoneList().then(() => {
        wepy.stopPullDownRefresh()
      })
    } else {
      this.getProject().then(() => {
        wepy.stopPullDownRefresh()
      })
    }
  }

  onReachBottom() {
    if (this.loadMoreDoneList) {
      this.getDoneList()
    }
  }

  async getList() {
    const result = await this.request(api.task.list.method, api.task.list.url, {
      projectId: this.project.id,
      done: 0
    })
    this.list = result.data
    this.$apply()
  }

  async getProject() {
    const result = await this.request(api.project.show.method, api.project.show.url.replace(':id', this.project.id))
    this.project = result.data
    this.store().currentProject = this.project
    this.$apply()
  }

  async getDoneList() {
    const result = await this.request(api.task.page.method, api.task.page.url, {
      projectId: this.project.id,
      done: 1,
      page: this.page.page + 1,
      size: this.page.size
    })
    this.page.total = result.data.count
    if (this.page.total > this.page.page * this.page.size) {
      this.page.page++
    }
    this.doneList = this.doneList.concat(result.data.rows)
    this.$apply()
  }

  async getAllUsersAndGroups() {
    const result = await this.request(api.user.all.method, api.user.all.url, {
      teamId: this.currentTeam.id,
      status: 1
    })
    this.allUsers = result.data.users
    this.store().allUsers = this.allUsers
    this.$apply()
  }

  async updateTask(id, task, event) {
    const result = await this.request(api.task.update.method, api.task.update.url.replace(':id', id), {
      task,
      event
    })
    if (result.code !== 0) {
      this.showToast(result.message)
    }
  }

  async updateProject(name, desc) {
    const result = await this.request(api.project.update.method, api.project.update.url.replace(':id', this.project.id), {
      project: { name, desc }
    })
    if (result.code === 0) {
      this.showToast('操作成功')
      this.index = 0
    } else {
      this.showToast(result.message)
    }
    this.project.name = name
    this.project.desc = desc
    this.$apply()
  }

  async updateProjectMembers() {
    let users = []
    let userList = []
    for (const item of this.members) {
      if (item.checked) {
        users.push(item.id)
        userList.push(item)
      }
    }
    const result = await this.request(api.project.update.method, api.project.update.url.replace(':id', this.project.id), {
      users
    })
    if (result.code === 0) {
      this.showToast('操作成功')
      this.visable = false
      // textarea显示
      setTimeout(() => {
        this.projectHidden = false
        this.$apply()
      }, 300)
      this.project.users = userList
    } else {
      this.showToast(result.message)
    }
    this.$apply()
  }

  setMembers() {
    this.members = []
    for (const user of this.allUsers) {
      user.checked = false
      for (const member of this.project.users) {
        if (user.id === member.id) {
          user.checked = true
          continue
        }
      }
      this.members.push(user)
    }
  }
}
</script>

<style lang="stylus">
@import '../common/assets/style/variable'

.tab
  display flex
  background-color #fff
  &-item
    flex 1
    overflow hidden
    white-space nowrap
  &-title
    text-align center
    padding 12rpx 0
    &-active
      color $color-primary
  &-line
    height 4rpx
    &-active
      background-color $color-primary
.panel
  background $color-background
.project-name
  padding 24rpx
  color $color-text
  background #fff
  border-bottom 1px solid $color-divider
.project-desc
  padding 16rpx 24rpx
  color $color-text
  border-bottom 1px solid $color-divider
  background #fff
.project-desc-textarea
  height 200rpx
  width 100%
.project-btn
  margin 64rpx 24rpx 0 24rpx
</style>
