<template>
  <import src="/plugins/wxParse/wxParse.wxml" />
  <view class="padding-top-24">
    <view class="card">
      <view class="project-name">项目：{{project.name}}</view>
      <view class="center">
        <view>
          <view @tap="handleTap" :class="{'task-button':task.done === 0,'task-button-done':task.done === 1}">
            <text wx:if="{{task.done === 0}}">点击完成任务</text>
            <text wx:else class="ht-icon ht-check"></text>
            <view animation="{{animationData}}" hidden="{{animationHidden}}" class="circle"></view>
          </view>
        </view>
        <view @tap="editTitle" class="task-title">
          <text>{{task.title}}</text>
        </view>
      </view>
      <view class="task-meta">
        <text class="ht-icon ht-person-add"></text>
        <picker disabled="{{task.done === 1}}" range="{{members}}" range-key="{{'name'}}" value="{{memberIndex}}" @change="changeAssignee" class="task-meta-picker">
          <text wx:if="{{memberIndex !== null}}">{{members[memberIndex].name}} 负责</text>
          <text wx:else class="task-meta-placeholder">选择负责人</text>
        </picker>
        <text @tap="clearAssignee" wx:if="{{memberIndex !== null && task.done === 0}}" class="ht-icon ht-close"></text>
      </view>
      <view class="task-meta">
        <text class="ht-icon ht-clock-outline"></text>
        <picker disabled="{{task.done === 1}}" mode="date" value="{{task.deadline}}" @change="changeDeadline" class="task-meta-picker">
          <text wx:if="{{task.done === 1}}">{{doneAtLabel}} 完成</text>
          <block wx:else>
            <text wx:if="{{task.deadline}}">{{deadlineLabel}} 到期</text>
            <text wx:else class="task-meta-placeholder">设置截至时间</text>
          </block>
        </picker>
        <text @tap="clearDeadline" wx:if="{{task.deadline && task.done === 0}}" class="ht-icon ht-close"></text>
      </view>
      <view class="task-meta" style="align-items:flex-start">
        <text class="ht-icon ht-detail margin-right-24"></text>
        <!-- <text wx:if="{{task.desc}}" class="task-meta-label">{{task.desc}}</text> -->
        <view class="task-meta-html" wx:if="{{task.desc}}">
          <htmlParser :parserContent.sync="desc"></htmlParser>
        </view>
        <text wx:else class="task-meta-link">添加任务描述</text>
      </view>
    </view>
    <view wx:if="{{task.comments.length !== 0}}" class="comment">
      <view wx:for="{{task.comments}}" wx:key="{{index}}" wx:for-item="item" class="comment-item">
        <view class="flex-row" style="align-items:center">
          <view class="comment-avatar" style="background:{{wxsUtils.avatarColor(item.user.color)}}">
            <text>{{wxsUtils.avatarName(item.user.name)}}</text>
          </view>
          <view class="flex-row" style="align-items:baseline">
            <text class="comment-user">{{item.user.name}}</text>
            <text class="comment-time">{{wxsDate.formatTime(item.created_at)}}</text>
          </view>
        </view>
        <view class="comment-content">
          <text>{{item.content}}</text>
        </view>
      </view>
    </view>
    <view class="card event">
      <view @tap="toggleEventList" class="view-link" hover="true" hover-class="view-light-hover">{{eventListHeader}}</view>
      <block wx:if="{{eventsVisable}}">
        <view wx:for="{{eventList}}" wx:key="{{index}}" wx:for-item="item" class="event-item">
          <text class="event-label">{{wxsDate.formatTime(item.created_at)}}</text>
          <text class="event-label">{{item.user.name}}</text>
          <text decode class="event-label">{{item.event}}</text>
          <text wx:if="{{item.deadline}}" class="event-label">{{wxsDate.formatDate(item.deadline)}}</text>
          <text></text>
        </view>
      </block>
    </view>
  </view>
  <view :class="{page-cover-show: visable}" class="page-cover">
    <form @submit="handleOk">
      <view class="toolbar">
        <text @tap="handleCancel" class="text-button">取消</text>
        <button form-type="submit" class="btn-text">保存</button>
      </view>
      <view hidden="{{!visable}}" class="task-edit">
        <textarea wx:if="{{isEditComment}}" name="comment" maxlength="200" show-confirm-bar="{{false}}" placeholder="点击输入评论" class="textarea-cell" />
        <block wx:else>
          <textarea wx:if="{{isEditTitle}}" value="{{task.title}}" name="title" maxlength="200" show-confirm-bar="{{false}}" placeholder="请输入任务名称" class="textarea-cell" />
          <textarea wx:else value="{{task.desc}}" name="desc" maxlength="200" show-confirm-bar="{{false}}" placeholder="点击输入任务描述" class="textarea-cell" />
        </block>
      </view>
    </form>
  </view>
  <view @tap="editComment" class="comment-footer">
    <text class="ht-icon ht-chat" style="padding: 0 24rpx"></text>
    <text class="flex-1">添加评论</text>
    <text @tap.stop="showActions" class="ht-icon ht-more-outline" style="padding: 0 24rpx"></text>
  </view>
  <view></view>
</template>

<script>
import wepy from 'wepy'
import htmlParser from '@/components/htmlParser'
import BasePage from 'BasePage'
import date from 'utils/date'
import wxsDate from '../wxs/date.wxs'
import wxsUtils from '../wxs/utils.wxs'
import taskEvent from '@/common/constant/taskEvent'
import { api } from '@/config'
export default class Task extends BasePage {
  config = {
    navigationBarTitleText: '任务详情'
  }

  components = {
    htmlParser: htmlParser
  }

  wxs = {
    wxsDate,
    wxsUtils
  }

  data = {
    desc: '',
    task: {
      id: '',
      title: '',
      desc: '',
      deadline: '',
      done: 0
    },
    project: {
      id: '',
      name: ''
    },
    memberIndex: null,
    members: [],
    eventsVisable: false,
    eventList: [],
    visable: false,
    isEditTitle: false,
    isEditComment: false,
    actions: [
      '编辑标题',
      '编辑描述',
      '删除任务'
    ],
    animationHidden: true,
    animationData: {},
    tapDisabled: false
  }

  computed = {
    eventListHeader() {
      return this.eventsVisable ? '隐藏任务动态' : '查看任务动态'
    },
    deadlineLabel() {
      return date.format(this.task.deadline)
    },
    doneAtLabel() {
      return date.format(this.task.done_at)
    }
  }

  methods = {
    handleTap() {
      if (this.tapDisabled) {
        this.showToast('请勿连续点击！')
        return
      } else {
        this.tapDisabled = true
      }
      // 先显示动画层
      this.animationHidden = false
      this.$apply()
      // 点击圆形扩散动画
      let animation = wepy.createAnimation()
      animation.opacity(0).scale(4).step({
        duration: 1000,
        timingFunction: 'ease'
      })
      this.animationData = animation.export()

      // 动画执行完后将动画层隐藏
      setTimeout(() => {
        this.animationHidden = true
        this.tapDisabled = false
        animation.scale(1).opacity(1).step({ duration: 0 })
        this.animationData = animation.export()
        this.$apply()
      }, 1000)

      let task = {}
      let event = {}
      event.user_id = this.user.id
      event.task_id = this.task.id
      if (this.task.done === 0) {
        task.done = 1
        event.type = taskEvent.done
        event.event = taskEvent.doneText
      } else {
        task.done = 0
        event.type = taskEvent.reopen
        event.event = taskEvent.reopenText
      }
      this.updateTask(this.task.id, task, event).then(res => {
        if (res.code !== 0) {
          this.showToast(res.message)
          return
        }
        this.task.done = task.done
        // 完成任务时设置完成时间为当前时间，避免一次查询
        if (task.done === 1) {
          this.task.done_at = date.toIOSString()
        }
        this.$apply()
      })
    },
    showActions() {
      wepy.showActionSheet({
        itemList: this.actions,
        itemColor: '#2d8cf0'
      }).then(res => {
        if (res.tapIndex === 0) {
          if (this.task.done === 1) {
            this.showToast('任务已完成，不能再次编辑。')
            return
          }
          this.isEditTitle = true
          this.visable = true
          this.$apply()
        } else if (res.tapIndex === 1) {
          if (this.task.done === 1) {
            this.showToast('任务已完成，不能再次编辑。')
            return
          }
          this.isEditTitle = false
          this.visable = true
          this.$apply()
        } else if (res.tapIndex === 2) {
          wepy.showModal({
            title: '提醒',
            content: '确定要删除任务吗？',
            confirmColor: '#2d8cf0'
          }).then(res => {
            if (res.confirm) {
              this.deleteTask(this.task.id)
            }
          })
        }
      }).catch()
    },
    editComment() {
      this.isEditComment = true
      this.visable = true
    },
    editTitle() {
      if (this.task.done === 1) {
        return
      }
      this.isEditTitle = true
      this.visable = true
    },
    handleOk(e) {
      let { title, desc, comment } = e.detail.value
      if (this.isEditComment) {
        if (comment.trim() === '') {
          this.showToast('请输入评论')
          return
        }
        this.addComment(this.task.id, comment).then(res => {
          if (res.code !== 0) {
            this.showToast(res.message)
            return
          }
          // 把评论加入列表
          res.data.user = this.user
          this.task.comments.push(res.data)
          this.isEditComment = false
          this.visable = false
          this.$apply()
        })
      } else {
        let task = {}
        if (this.isEditTitle) {
          if (title.trim() === '') {
            this.showToast('请输入任务名称')
            return
          }
          task.title = title
        } else {
          task.desc = desc
        }
        let event = {}
        event.user_id = this.user.id
        event.task_id = this.task.id
        event.type = taskEvent.update
        event.event = taskEvent.updateText
        this.updateTask(this.task.id, task, event).then(res => {
          if (res.code !== 0) {
            this.showToast(res.message)
            return
          }
          if (this.isEditTitle) {
            this.task.title = title
          } else {
            this.task.desc = desc
          }
          this.visable = false
          this.$apply()
        })
      }
      console.log(e.detail.value)
    },
    handleCancel() {
      this.isEditComment = false
      this.visable = false
    },
    changeAssignee(e) {
      if (this.memberIndex === e.detail.value) {
        return
      }
      let task = {}
      let event = {}
      let member = this.members[e.detail.value]
      task.user_id = member.id
      event.user_id = this.user.id
      event.task_id = this.task.id
      event.type = taskEvent.assign
      event.event = taskEvent.assignText.replace('{assignee}', member.name)

      this.updateTask(this.task.id, task, event).then(res => {
        if (res.code !== 0) {
          this.showToast(res.message)
          return
        }
        this.memberIndex = e.detail.value
        this.$apply()
        console.log('changeAssignee')
      })
    },
    changeDeadline(e) {
      if (this.task.deadline === e.detail.value) {
        return
      }
      let task = {}
      let event = {}
      task.deadline = date.toIOSString(e.detail.value)
      event.user_id = this.user.id
      event.task_id = this.task.id
      event.type = taskEvent.deadline
      event.event = taskEvent.deadlineText
      event.deadline = task.deadline

      this.updateTask(this.task.id, task, event).then(res => {
        if (res.code !== 0) {
          this.showToast(res.message)
          return
        }
        this.task.deadline = e.detail.value
        this.$apply()
        console.log('changeDeadline')
      })
    },
    clearDeadline() {
      let task = {}
      let event = {}
      task.deadline = null
      event.user_id = this.user.id
      event.task_id = this.task.id
      event.type = taskEvent.noDeadline
      event.event = taskEvent.noDeadlineText
      this.updateTask(this.task.id, task, event).then(res => {
        if (res.code !== 0) {
          this.showToast(res.message)
          return
        }
        this.task.deadline = ''
        this.$apply()
        console.log('clearDeadline')
      })
    },
    clearAssignee() {
      let task = {}
      let event = {}
      let member = this.members[this.memberIndex]
      task.user_id = null
      event.user_id = this.user.id
      event.task_id = this.task.id
      event.type = taskEvent.unassign
      event.event = taskEvent.unassignText.replace('{assignee}', member.name)
      this.updateTask(this.task.id, task, event).then(res => {
        if (res.code !== 0) {
          this.showToast(res.message)
          return
        }
        this.memberIndex = null
        this.$apply()
        console.log('clearAssignee')
      })
    },
    toggleEventList() {
      if (this.eventsVisable) {
        this.eventsVisable = false
      } else {
        this.eventsVisable = true
        if (this.eventList.length === 0) {
          this.getEventList()
        }
      }
    }
  }

  async onLoad(option) {
    this.user = this.store().user
    this.task.id = option.id
    if (option.pId) {
      this.project.id = option.pId
      await this.getProject()
    } else {
      this.project = this.store().currentProject
    }
    await this.getTask()
    this.members = this.project.users
    for (let index = 0; index < this.members.length; index++) {
      if (this.task.user_id === this.members[index].id) {
        this.memberIndex = index
        break
      }
    }
    this.desc = this.task.desc
    this.$apply()
    this.$invoke('htmlParser', 'htmlParserLoad')
  }

  async getTask() {
    const result = await this.request(api.task.show.method, api.task.show.url.replace(':id', this.task.id))
    this.task = result.data
  }

  async getProject() {
    const result = await this.request(api.project.show.method, api.project.show.url.replace(':id', this.project.id))
    this.project = result.data
  }

  async getEventList() {
    const result = await this.request(api.task.showEvent.method, api.task.showEvent.url.replace(':id', this.task.id))
    this.eventList = result.data
    this.$apply()
  }

  updateTask(id, task, event) {
    return this.request(api.task.update.method, api.task.update.url.replace(':id', id), {
      task,
      event
    })
  }

  async deleteTask(id) {
    const result = await this.request(api.task.delete.method, api.task.delete.url.replace(':id', id))
    if (result.code === 0) {
      wepy.navigateBack({
        delta: 1
      })
    } else {
      this.showToast(result.message)
    }
  }

  addComment(id, comment) {
    return this.request(api.task.addComment.method, api.task.addComment.url.replace(':id', id), {
      content: comment,
      user_id: this.user.id
    })
  }
}
</script>

<style lang="stylus">
@import '../common/assets/style/variable'

.view-link
  color $color-primary
  padding 16rpx 24rpx
  text-align center
.event
  margin 24rpx 0 120rpx
  &-item
    display flex
    align-items center
    flex-wrap wrap
    padding 16rpx 32rpx
  &-label
    padding-right 24rpx
    font-size 28rpx
    color $color-text-prompt
.comment
  padding 24rpx 0
  &-item
    padding 24rpx
  &-avatar
    display flex
    align-items center
    justify-content center
    width 60rpx
    height 60rpx
    margin-right 24rpx
    color #fff
    font-size 20rpx
    border-radius 50%
  &-user
    color $color-text
    padding-right 16rpx
  &-time
    color $color-text-prompt
    font-size 24rpx
  &-content
    margin-left 84rpx
    color $color-text-secondary
    font-size 28rpx
  &-footer
    position fixed
    display flex
    align-items center
    bottom 0
    left 0
    width 100%
    padding 24rpx 0
    box-sizing border-box
    color $color-text-prompt
    background-color #fff
    border-top 1rpx solid $color-divider
    z-index 10
.btn-text
  margin 0
  padding 24rpx
  box-sizing content-box
  line-height 1.5
  color $color-primary
  background-color #fff
  &:after
    border none
.project-name
  padding 16rpx 24rpx
  font-size 28rpx
  color $color-text-prompt
.task-button
  position relative
  display flex
  flex-direction column
  justify-content center
  box-sizing border-box
  width 160rpx
  height 160rpx
  margin 32rpx auto
  padding 16rpx
  font-size 28rpx
  color $color-text-prompt
  border 1rpx solid $color-text
  border-radius 32rpx
  box-shadow inset 0 0 16rpx rgba(0, 0, 0, 0.3)
.task-button-done
  position relative
  display flex
  flex-direction column
  justify-content center
  box-sizing border-box
  width 160rpx
  height 160rpx
  margin 32rpx auto
  font-size 100rpx
  color #fff
  background $color-primary
  border-radius 32rpx
.circle
  position absolute
  left 30rpx
  top 30rpx
  width 100rpx
  height 100rpx
  border-radius 50%
  background-color rgba(0, 0, 0, 0.3)
  z-index 1
.task-title
  padding 16rpx 24rpx
  text-decoration-line underline
  text-decoration-style dashed
  text-underline-position under
  font-size 36rpx
.task-edit
  padding 16rpx 24rpx
  color $color-text
  background #fff
  border-bottom 1px solid $color-divider
</style>
